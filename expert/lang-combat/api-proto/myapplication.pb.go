// Code generated by protoc-gen-go. DO NOT EDIT.
// source: expert/lang-combat/api-proto/myapplication.proto

package myapplication

import (
	context "context"
	login_proto "expert/lang-combat/api-proto/protos/login-proto"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() {
	proto.RegisterFile("expert/lang-combat/api-proto/myapplication.proto", fileDescriptor_c455e4aa207a64b1)
}

var fileDescriptor_c455e4aa207a64b1 = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x48, 0xad, 0x28, 0x48,
	0x2d, 0x2a, 0xd1, 0xcf, 0x49, 0xcc, 0x4b, 0xd7, 0x4d, 0xce, 0xcf, 0x4d, 0x4a, 0x2c, 0xd1, 0x4f,
	0x2c, 0xc8, 0xd4, 0x2d, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0xad, 0x4c, 0x2c, 0x28, 0xc8, 0xc9,
	0x4c, 0x4e, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x03, 0x8b, 0x09, 0x71, 0xe5, 0xe4, 0xa7, 0x67, 0xe6,
	0x81, 0xd9, 0x52, 0xd6, 0x78, 0x75, 0x83, 0xc9, 0x62, 0x7d, 0xb0, 0x7a, 0xa8, 0x10, 0x98, 0x0d,
	0x31, 0xc8, 0x28, 0x94, 0x4b, 0xd4, 0xb7, 0xd2, 0x11, 0x61, 0x7e, 0x70, 0x6a, 0x51, 0x59, 0x66,
	0x72, 0x6a, 0xb1, 0x90, 0x0d, 0x17, 0xab, 0x0f, 0x48, 0x9d, 0x90, 0x84, 0x1e, 0xc2, 0x2e, 0x3d,
	0xb0, 0x50, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x94, 0x24, 0x16, 0x99, 0xe2, 0x82, 0xfc,
	0xbc, 0xe2, 0x54, 0x27, 0xfe, 0x28, 0x5e, 0x14, 0x67, 0x27, 0xb1, 0x81, 0x55, 0x19, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xed, 0x99, 0x5a, 0xe8, 0xeb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MyApplicationServicesClient is the client API for MyApplicationServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MyApplicationServicesClient interface {
	Login(ctx context.Context, in *login_proto.LoginRequest, opts ...grpc.CallOption) (*login_proto.LoginResponse, error)
}

type myApplicationServicesClient struct {
	cc *grpc.ClientConn
}

func NewMyApplicationServicesClient(cc *grpc.ClientConn) MyApplicationServicesClient {
	return &myApplicationServicesClient{cc}
}

func (c *myApplicationServicesClient) Login(ctx context.Context, in *login_proto.LoginRequest, opts ...grpc.CallOption) (*login_proto.LoginResponse, error) {
	out := new(login_proto.LoginResponse)
	err := c.cc.Invoke(ctx, "/loginproto.MyApplicationServices/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyApplicationServicesServer is the server API for MyApplicationServices service.
type MyApplicationServicesServer interface {
	Login(context.Context, *login_proto.LoginRequest) (*login_proto.LoginResponse, error)
}

func RegisterMyApplicationServicesServer(s *grpc.Server, srv MyApplicationServicesServer) {
	s.RegisterService(&_MyApplicationServices_serviceDesc, srv)
}

func _MyApplicationServices_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(login_proto.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyApplicationServicesServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loginproto.MyApplicationServices/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyApplicationServicesServer).Login(ctx, req.(*login_proto.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyApplicationServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "loginproto.MyApplicationServices",
	HandlerType: (*MyApplicationServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _MyApplicationServices_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "expert/lang-combat/api-proto/myapplication.proto",
}
